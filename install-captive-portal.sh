#!/bin/bash

# ============================================================================
# WiFi Captive Portal - Automated Installation Script
# ============================================================================
# This script sets up a complete captive portal system with:
# - DNS hijacking via dnsmasq
# - Traffic interception via iptables
# - MAC address whitelisting
# - Automatic network access control
# ============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration Variables
PORTAL_IP="10.1.50.140"
PORTAL_PORT="3000"
GATEWAY_IP="10.1.50.1"
NETWORK_INTERFACE="eno1"
WHITELIST_DIR="/etc/captive-portal"
WHITELIST_FILE="$WHITELIST_DIR/allowed_macs.txt"
BACKUP_DIR="$WHITELIST_DIR/backups"

# Function to print colored output
print_header() {
    echo -e "\n${BLUE}============================================================${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}============================================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Display configuration
show_config() {
    print_header "Captive Portal Configuration"
    echo -e "${CYAN}Portal IP:${NC}        $PORTAL_IP"
    echo -e "${CYAN}Portal Port:${NC}      $PORTAL_PORT"
    echo -e "${CYAN}Gateway IP:${NC}       $GATEWAY_IP"
    echo -e "${CYAN}Interface:${NC}        $NETWORK_INTERFACE"
    echo -e "${CYAN}Whitelist File:${NC}   $WHITELIST_FILE"
    echo ""
    read -p "Continue with this configuration? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Installation cancelled"
        exit 0
    fi
}

# Backup existing configurations
backup_configs() {
    print_header "Backing Up Existing Configurations"

    mkdir -p "$BACKUP_DIR"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)

    # Backup dnsmasq
    if [ -f /etc/dnsmasq.conf ]; then
        cp /etc/dnsmasq.conf "$BACKUP_DIR/dnsmasq.conf.$TIMESTAMP" 2>/dev/null || true
        print_success "Backed up dnsmasq.conf"
    fi

    # Backup iptables
    if command -v iptables-save &> /dev/null; then
        iptables-save > "$BACKUP_DIR/iptables.rules.$TIMESTAMP" 2>/dev/null || true
        print_success "Backed up iptables rules"
    fi

    # Backup existing whitelist
    if [ -f "$WHITELIST_FILE" ]; then
        cp "$WHITELIST_FILE" "$BACKUP_DIR/allowed_macs.$TIMESTAMP" 2>/dev/null || true
        print_success "Backed up MAC whitelist"
    fi
}

# Install required packages
install_packages() {
    print_header "Installing Required Packages"

    apt-get update
    apt-get install -y \
        dnsmasq \
        iptables \
        iptables-persistent \
        netfilter-persistent \
        net-tools \
        curl \
        wget

    print_success "All required packages installed"
}

# Configure dnsmasq
configure_dnsmasq() {
    print_header "Configuring DNS (dnsmasq)"

    # Stop dnsmasq temporarily
    systemctl stop dnsmasq 2>/dev/null || true

    # Create captive portal config
    cat > /etc/dnsmasq.d/captive-portal.conf << EOF
# Captive Portal DNS Configuration
# Generated by install-captive-portal.sh

# Listen on specific interface
interface=$NETWORK_INTERFACE
bind-interfaces

# Never forward plain names (without a dot or domain part)
domain-needed

# Never forward addresses in the non-routed address spaces
bogus-priv

# DNS hijacking - redirect all domains to portal
address=/#/$PORTAL_IP

# Specific exceptions (if needed)
# address=/portal.local/$PORTAL_IP

# Don't read /etc/hosts
no-hosts

# Don't read /etc/resolv.conf for upstream servers
no-resolv

# Use Google DNS for upstream (when whitelisted)
server=8.8.8.8
server=8.8.4.4

# Cache size
cache-size=1000

# Log queries (disable in production for performance)
log-queries
log-facility=/var/log/dnsmasq.log

# DHCP settings (optional - uncomment if you want dnsmasq to handle DHCP)
# dhcp-range=$NETWORK_INTERFACE,10.1.50.50,10.1.50.150,12h
# dhcp-option=3,$GATEWAY_IP  # Gateway
# dhcp-option=6,$PORTAL_IP   # DNS Server
EOF

    # Enable and start dnsmasq
    systemctl enable dnsmasq
    systemctl restart dnsmasq

    print_success "dnsmasq configured and started"
}

# Configure iptables
configure_iptables() {
    print_header "Configuring Firewall (iptables)"

    # Enable IP forwarding
    sysctl -w net.ipv4.ip_forward=1
    echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
    print_success "IP forwarding enabled"

    # Flush existing rules (be careful in production!)
    print_info "Clearing existing iptables rules..."
    iptables -t nat -F
    iptables -t filter -F
    iptables -t mangle -F

    # Create custom chains
    iptables -t nat -N CAPTIVE_PORTAL 2>/dev/null || true
    iptables -t filter -N CAPTIVE_ALLOWED 2>/dev/null || true

    print_info "Setting up captive portal rules..."

    # ===== NAT Table Rules =====

    # Allow already whitelisted MACs (will be populated by whitelist script)
    # These rules will be inserted at position 1 when MACs are whitelisted

    # Allow direct access to portal
    iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -d $PORTAL_IP -p tcp --dport $PORTAL_PORT -j ACCEPT

    # Redirect DNS to portal
    iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -p udp --dport 53 -j DNAT --to-destination $PORTAL_IP:53
    iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -p tcp --dport 53 -j DNAT --to-destination $PORTAL_IP:53

    # Redirect HTTP to portal (for non-whitelisted devices)
    iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -p tcp --dport 80 ! -d $PORTAL_IP -j DNAT --to-destination $PORTAL_IP:$PORTAL_PORT

    # Redirect HTTPS to portal (for non-whitelisted devices)
    iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -p tcp --dport 443 ! -d $PORTAL_IP -j DNAT --to-destination $PORTAL_IP:$PORTAL_PORT

    # NAT for internet access (for whitelisted MACs)
    iptables -t nat -A POSTROUTING -o $NETWORK_INTERFACE -j MASQUERADE

    # ===== Filter Table Rules =====

    # Allow localhost
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT

    # Allow established connections
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

    # Allow SSH (important - don't lock yourself out!)
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT

    # Allow portal access
    iptables -A INPUT -p tcp --dport $PORTAL_PORT -j ACCEPT

    # Allow DNS
    iptables -A INPUT -p udp --dport 53 -j ACCEPT
    iptables -A INPUT -p tcp --dport 53 -j ACCEPT

    # Allow DHCP
    iptables -A INPUT -p udp --dport 67 -j ACCEPT
    iptables -A INPUT -p udp --dport 68 -j ACCEPT

    # Allow ICMP (ping)
    iptables -A INPUT -p icmp -j ACCEPT
    iptables -A FORWARD -p icmp -j ACCEPT

    # Block all other forwarding by default (except whitelisted MACs)
    iptables -A FORWARD -i $NETWORK_INTERFACE -j DROP

    # Save rules
    print_info "Saving iptables rules..."
    mkdir -p /etc/iptables
    iptables-save > /etc/iptables/rules.v4

    # Enable persistence
    systemctl enable netfilter-persistent

    print_success "Firewall rules configured and saved"
}

# Create MAC whitelist management script
create_whitelist_script() {
    print_header "Creating MAC Whitelist Management System"

    mkdir -p "$WHITELIST_DIR"
    touch "$WHITELIST_FILE"

    cat > /usr/local/bin/captive-whitelist << 'EOF'
#!/bin/bash

# MAC Address Whitelist Management for Captive Portal
# This script manages firewall rules for authenticated devices

WHITELIST_FILE="/etc/captive-portal/allowed_macs.txt"
INTERFACE="eno1"
LOG_FILE="/var/log/captive-portal.log"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log_action() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Validate MAC address format
validate_mac() {
    local mac=$1
    if [[ $mac =~ ^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Add MAC to whitelist
add_mac() {
    local mac=$(echo "$1" | tr '[:upper:]' '[:lower:]')

    if ! validate_mac "$mac"; then
        echo -e "${RED}Invalid MAC address format: $1${NC}"
        exit 1
    fi

    # Check if already whitelisted
    if grep -q "^$mac$" "$WHITELIST_FILE" 2>/dev/null; then
        echo -e "${YELLOW}MAC address already whitelisted: $mac${NC}"
        return 0
    fi

    # Add to whitelist file
    echo "$mac" >> "$WHITELIST_FILE"

    # Add iptables rules - insert at position 1 (before DROP rules)
    # Allow in FORWARD chain
    iptables -I FORWARD 1 -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT

    # Bypass portal redirection in NAT PREROUTING
    iptables -t nat -I PREROUTING 1 -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT

    # Save rules
    iptables-save > /etc/iptables/rules.v4

    log_action "WHITELIST_ADD: $mac"
    echo -e "${GREEN}✓ MAC address whitelisted: $mac${NC}"
}

# Remove MAC from whitelist
remove_mac() {
    local mac=$(echo "$1" | tr '[:upper:]' '[:lower:]')

    if ! validate_mac "$mac"; then
        echo -e "${RED}Invalid MAC address format: $1${NC}"
        exit 1
    fi

    # Remove from whitelist file
    sed -i "/^$mac$/d" "$WHITELIST_FILE"

    # Remove iptables rules
    iptables -D FORWARD -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT 2>/dev/null || true
    iptables -t nat -D PREROUTING -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT 2>/dev/null || true

    # Save rules
    iptables-save > /etc/iptables/rules.v4

    log_action "WHITELIST_REMOVE: $mac"
    echo -e "${GREEN}✓ MAC address removed from whitelist: $mac${NC}"
}

# List whitelisted MACs
list_macs() {
    echo -e "${GREEN}Whitelisted MAC addresses:${NC}"
    echo "=========================="
    if [ -f "$WHITELIST_FILE" ] && [ -s "$WHITELIST_FILE" ]; then
        nl -w2 -s'. ' "$WHITELIST_FILE"
        echo "=========================="
        echo "Total: $(wc -l < "$WHITELIST_FILE") devices"
    else
        echo "No MAC addresses whitelisted"
    fi
}

# Reload all MACs from file (useful after reboot)
reload_macs() {
    echo -e "${YELLOW}Reloading MAC whitelist...${NC}"

    if [ ! -f "$WHITELIST_FILE" ]; then
        echo -e "${RED}Whitelist file not found${NC}"
        exit 1
    fi

    # Clear existing MAC rules
    iptables-save | grep -v "mac-source" | iptables-restore

    # Re-add all MACs
    while IFS= read -r mac; do
        if [ ! -z "$mac" ] && validate_mac "$mac"; then
            # Add rules without printing output
            iptables -I FORWARD 1 -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT
            iptables -t nat -I PREROUTING 1 -i $INTERFACE -m mac --mac-source "$mac" -j ACCEPT
            echo -e "${GREEN}✓ Reloaded: $mac${NC}"
        fi
    done < "$WHITELIST_FILE"

    # Save rules
    iptables-save > /etc/iptables/rules.v4

    log_action "WHITELIST_RELOAD: $(wc -l < "$WHITELIST_FILE") MACs"
    echo -e "${GREEN}✓ Whitelist reloaded successfully${NC}"
}

# Show usage
show_usage() {
    echo "Usage: captive-whitelist {add|remove|list|reload} [MAC_ADDRESS]"
    echo ""
    echo "Commands:"
    echo "  add MAC_ADDRESS     Add a MAC address to the whitelist"
    echo "  remove MAC_ADDRESS  Remove a MAC address from the whitelist"
    echo "  list               Show all whitelisted MAC addresses"
    echo "  reload             Reload all MACs from the whitelist file"
    echo ""
    echo "Example:"
    echo "  captive-whitelist add aa:bb:cc:dd:ee:ff"
    echo "  captive-whitelist remove aa:bb:cc:dd:ee:ff"
    echo "  captive-whitelist list"
}

# Main logic
case "$1" in
    add)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: MAC address required${NC}"
            show_usage
            exit 1
        fi
        add_mac "$2"
        ;;
    remove)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: MAC address required${NC}"
            show_usage
            exit 1
        fi
        remove_mac "$2"
        ;;
    list)
        list_macs
        ;;
    reload)
        reload_macs
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
EOF

    chmod +x /usr/local/bin/captive-whitelist
    print_success "MAC whitelist management script created"
}

# Create status monitoring script
create_status_script() {
    print_header "Creating Status Monitoring Script"

    cat > /usr/local/bin/captive-status << 'EOF'
#!/bin/bash

# Captive Portal Status Monitor

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}       Captive Portal System Status        ${NC}"
echo -e "${BLUE}============================================${NC}"

# Check Node.js application
echo -e "\n${CYAN}[Portal Application]${NC}"
if pgrep -f "node.*app.js" > /dev/null; then
    echo -e "${GREEN}✓ Portal application is running${NC}"
    echo "  PID: $(pgrep -f "node.*app.js")"
    echo "  URL: http://10.1.50.140:3000"
else
    echo -e "${RED}✗ Portal application is not running${NC}"
    echo "  Start with: npm run dev"
fi

# Check dnsmasq
echo -e "\n${CYAN}[DNS Service (dnsmasq)]${NC}"
if systemctl is-active --quiet dnsmasq; then
    echo -e "${GREEN}✓ dnsmasq is running${NC}"
    echo "  Status: $(systemctl is-active dnsmasq)"
else
    echo -e "${RED}✗ dnsmasq is not running${NC}"
    echo "  Start with: sudo systemctl start dnsmasq"
fi

# Check Redis
echo -e "\n${CYAN}[Session Store (Redis)]${NC}"
if pgrep -x redis-server > /dev/null; then
    echo -e "${GREEN}✓ Redis is running${NC}"
    echo "  PID: $(pgrep -x redis-server)"
else
    echo -e "${RED}✗ Redis is not running${NC}"
    echo "  Start with: sudo systemctl start redis"
fi

# Check PostgreSQL
echo -e "\n${CYAN}[Database (PostgreSQL)]${NC}"
if systemctl is-active --quiet postgresql; then
    echo -e "${GREEN}✓ PostgreSQL is running${NC}"
    echo "  Status: $(systemctl is-active postgresql)"
else
    echo -e "${RED}✗ PostgreSQL is not running${NC}"
    echo "  Start with: sudo systemctl start postgresql"
fi

# Check iptables rules
echo -e "\n${CYAN}[Firewall Rules]${NC}"
PORTAL_RULES=$(iptables -t nat -L -n | grep -c "10.1.50.140" 2>/dev/null || echo "0")
if [ "$PORTAL_RULES" -gt 0 ]; then
    echo -e "${GREEN}✓ Portal redirection rules active${NC}"
    echo "  Active rules: $PORTAL_RULES"
else
    echo -e "${RED}✗ No portal redirection rules found${NC}"
    echo "  Configure with: sudo ./install-captive-portal.sh"
fi

# Check whitelisted MACs
echo -e "\n${CYAN}[Whitelisted Devices]${NC}"
if [ -f /etc/captive-portal/allowed_macs.txt ]; then
    MAC_COUNT=$(wc -l < /etc/captive-portal/allowed_macs.txt)
    echo -e "${GREEN}✓ Whitelist file exists${NC}"
    echo "  Whitelisted MACs: $MAC_COUNT"
    if [ "$MAC_COUNT" -gt 0 ]; then
        echo "  Recent entries:"
        tail -3 /etc/captive-portal/allowed_macs.txt | sed 's/^/    /'
    fi
else
    echo -e "${YELLOW}⚠ No whitelist file found${NC}"
fi

# Network interface status
echo -e "\n${CYAN}[Network Interface]${NC}"
INTERFACE="eno1"
if ip link show $INTERFACE &>/dev/null; then
    IP_ADDR=$(ip -4 addr show $INTERFACE | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
    echo -e "${GREEN}✓ Interface $INTERFACE is up${NC}"
    echo "  IP Address: $IP_ADDR"
    echo "  MAC: $(ip link show $INTERFACE | grep -oP '(?<=ether\s)[a-f0-9:]{17}')"
else
    echo -e "${RED}✗ Interface $INTERFACE not found${NC}"
fi

# Check logs
echo -e "\n${CYAN}[Recent Logs]${NC}"
if [ -f /var/log/captive-portal.log ]; then
    echo "Last 5 portal actions:"
    tail -5 /var/log/captive-portal.log | sed 's/^/  /'
else
    echo "No portal logs found"
fi

echo -e "\n${BLUE}============================================${NC}"
echo -e "${YELLOW}Quick Commands:${NC}"
echo "  View logs:        sudo journalctl -u dnsmasq -n 20"
echo "  Add MAC:          sudo captive-whitelist add AA:BB:CC:DD:EE:FF"
echo "  List MACs:        sudo captive-whitelist list"
echo "  Test DNS:         nslookup google.com 127.0.0.1"
echo "  View connections: sudo netstat -tulpn | grep -E '3000|53'"
echo -e "${BLUE}============================================${NC}"
EOF

    chmod +x /usr/local/bin/captive-status
    print_success "Status monitoring script created"
}

# Create systemd service for auto-restore on boot
create_systemd_service() {
    print_header "Creating Systemd Service"

    cat > /etc/systemd/system/captive-portal-network.service << EOF
[Unit]
Description=Captive Portal Network Configuration
After=network.target
Before=dnsmasq.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/captive-whitelist reload
ExecStartPost=/bin/bash -c 'iptables-restore < /etc/iptables/rules.v4'
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable captive-portal-network.service

    print_success "Systemd service created and enabled"
}

# Reload existing whitelisted MACs
reload_whitelist() {
    print_header "Loading Existing Whitelist"

    if [ -f "$WHITELIST_FILE" ] && [ -s "$WHITELIST_FILE" ]; then
        /usr/local/bin/captive-whitelist reload
    else
        print_info "No existing MAC addresses to reload"
    fi
}

# Main installation process
main() {
    clear
    print_header "WiFi Captive Portal Installation"

    check_root
    show_config
    backup_configs
    install_packages
    configure_dnsmasq
    configure_iptables
    create_whitelist_script
    create_status_script
    create_systemd_service
    reload_whitelist

    print_header "Installation Complete!"

    echo -e "${GREEN}The captive portal network infrastructure has been installed successfully!${NC}"
    echo ""
    echo -e "${YELLOW}Next Steps:${NC}"
    echo "1. Ensure your Node.js application is running:"
    echo "   ${CYAN}cd /home/mlopez/gitprojects/march-wifi${NC}"
    echo "   ${CYAN}npm run dev${NC}"
    echo ""
    echo "2. Check system status:"
    echo "   ${CYAN}sudo captive-status${NC}"
    echo ""
    echo "3. Test with a client device:"
    echo "   - Connect to the network"
    echo "   - Try browsing any website"
    echo "   - You should be redirected to the portal"
    echo ""
    echo -e "${YELLOW}Management Commands:${NC}"
    echo "  ${CYAN}captive-whitelist add <MAC>${NC}     - Add device to whitelist"
    echo "  ${CYAN}captive-whitelist remove <MAC>${NC}  - Remove device"
    echo "  ${CYAN}captive-whitelist list${NC}          - Show all whitelisted devices"
    echo "  ${CYAN}captive-status${NC}                  - Check system status"
    echo ""
    echo -e "${GREEN}Portal URL: http://$PORTAL_IP:$PORTAL_PORT${NC}"
    echo -e "${GREEN}Admin URL: http://$PORTAL_IP:$PORTAL_PORT/admin${NC}"
}

# Run main installation
main